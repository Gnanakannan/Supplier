"use strict";angular.module("ui.codemirror",[]).constant("uiCodemirrorConfig",{}).directive("uiCodemirror",uiCodemirrorDirective);function uiCodemirrorDirective($timeout,uiCodemirrorConfig){return{restrict:"EA",require:"?ngModel",compile:function compile(){if(angular.isUndefined(window.CodeMirror)){throw new Error("ui-codemirror needs CodeMirror to work... (o rly?)")}return postLink}};function postLink(scope,iElement,iAttrs,ngModel){var codemirrorOptions=angular.extend({value:iElement.text()},uiCodemirrorConfig.codemirror||{},scope.$eval(iAttrs.uiCodemirror),scope.$eval(iAttrs.uiCodemirrorOpts));var codemirror=newCodemirrorEditor(iElement,codemirrorOptions);configOptionsWatcher(codemirror,iAttrs.uiCodemirror||iAttrs.uiCodemirrorOpts,scope);configNgModelLink(codemirror,ngModel,scope);configUiRefreshAttribute(codemirror,iAttrs.uiRefresh,scope);scope.$on("CodeMirror",function(event,callback){if(angular.isFunction(callback)){callback(codemirror)}else{throw new Error("the CodeMirror event requires a callback function")}});if(angular.isFunction(codemirrorOptions.onLoad)){codemirrorOptions.onLoad(codemirror)}}function newCodemirrorEditor(iElement,codemirrorOptions){var codemirrot;if(iElement[0].tagName==="TEXTAREA"){codemirrot=window.CodeMirror.fromTextArea(iElement[0],codemirrorOptions)}else{iElement.html("");codemirrot=new window.CodeMirror(function(cm_el){iElement.append(cm_el)},codemirrorOptions)}return codemirrot}function configOptionsWatcher(codemirrot,uiCodemirrorAttr,scope){if(!uiCodemirrorAttr){return}var codemirrorDefaultsKeys=Object.keys(window.CodeMirror.defaults);scope.$watch(uiCodemirrorAttr,updateOptions,true);function updateOptions(newValues,oldValue){if(!angular.isObject(newValues)){return}codemirrorDefaultsKeys.forEach(function(key){if(newValues.hasOwnProperty(key)){if(oldValue&&newValues[key]===oldValue[key]){return}codemirrot.setOption(key,newValues[key])}})}}function configNgModelLink(codemirror,ngModel,scope){if(!ngModel){return}ngModel.$formatters.push(function(value){if(angular.isUndefined(value)||value===null){return""}else if(angular.isObject(value)||angular.isArray(value)){throw new Error("ui-codemirror cannot use an object or an array as a model")}return value});ngModel.$render=function(){var safeViewValue=ngModel.$viewValue||"";codemirror.setValue(safeViewValue)};codemirror.on("change",function(instance){var newValue=instance.getValue();if(newValue!==ngModel.$viewValue){scope.$evalAsync(function(){ngModel.$setViewValue(newValue)})}})}function configUiRefreshAttribute(codeMirror,uiRefreshAttr,scope){if(!uiRefreshAttr){return}scope.$watch(uiRefreshAttr,function(newVal,oldVal){if(newVal!==oldVal){$timeout(function(){codeMirror.refresh()})}})}}uiCodemirrorDirective.$inject=["$timeout","uiCodemirrorConfig"];